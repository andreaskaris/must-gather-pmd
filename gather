#!/bin/bash

set -eu

VERBOSE=true
EXTRACT_TIMEOUT=600s
BASE_COLLECTION_PATH="must-gather"
LOG_PATH="${BASE_COLLECTION_PATH}/pmd_logs"

# verbose can be enabled or disabled on demand
verbose () {
  [[ "${VERBOSE}" ]] && echo "$@" >&2
}

wait_for() {
  local pod_name="${1}"
  kubectl wait --for=condition=Ready pod "${pod_name}" --timeout="${EXTRACT_TIMEOUT}" &
  local pid1=$!
  kubectl wait --for=jsonpath='{.status.phase}'=Failed pod "${pod_name}" --timeout="${EXTRACT_TIMEOUT}" &
  local pid2=$!
  while kill -0 "${pid1}" && kill -0 "${pid2}"; do
      verbose "Waiting for pod condition to be met for pod ${pod_name}"
      sleep 5
  done
  if ! kill -0 "${pid1}"; then
    return 0
  fi
  return 1
}

get_collection_image() {
    local pod_name
    pod_name="${1:-}"

    verbose "Getting collection image from pod '${pod_name}'"

    kubectl get pods "${pod_name}" -o jsonpath='{.spec.containers[0].image}'
}

save_collector_logs() {
    local pod_name
    pod_name="$1"

    verbose "Saving logs from collector pod '${pod_name}'"

    kubectl logs -c data-collector "${pod_name}" > "/must-gather/${pod_name}.log"
}

collect_data() {
    local node
    node="$1"
    local pod_name
    pod_name="$2"
    local image
    image="$3"
    local process
    process="$4"

    verbose  "Collecting data for node: '${node}', pod_name: '${pod_name}', image: '${image}', process: '${process}'"

    run_data_collection_pod "${node}" "${pod_name}" "${image}" "${process}"
    if wait_for "${pod_name}"; then
        verbose  "Data collection succeeded"
        save_collector_logs "${pod_name}"
        kubectl cp -c sleep-infinity "${pod_name}:/must-gather" /must-gather
        kubectl delete pod "${pod_name}"
    else
        verbose  "Data timed out or failed"
        save_collector_logs "${pod_name}"
        kubectl delete pod --force --grace-period=0 "${pod_name}"
    fi
}

run_data_collection_pod() {
    local node
    node="$1"
    local pod_name
    pod_name="$2"
    local image
    image="$3"
    local process
    process="$4"

    cat << EOF | kubectl apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: ${pod_name}
  labels:
    name: gather-pmd
spec:
  initContainers:
  - command:
    - collect
    - ${process}
    env:
    - name: TMOUT
      value: "900"
    image: ${image}
    imagePullPolicy: Always
    name: data-collector
    resources: {}
    securityContext:
      privileged: true
      runAsUser: 0
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /host
      name: host
    - mountPath: /must-gather
      name: data-store
  containers:
  - command:
    - sleep
    - infinity
    image: ${image}
    imagePullPolicy: Always
    name: sleep-infinity
    volumeMounts:
    - mountPath: /must-gather
      name: data-store
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostIPC: true
  hostNetwork: true
  hostPID: true
  nodeName: ${node}
  preemptionPolicy: PreemptLowerPriority
  priority: 1000000000
  priorityClassName: openshift-user-critical
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - hostPath:
      path: /
      type: Directory
    name: host
  - emptyDir:
      sizeLimit: 10Gi
    name: data-store
EOF
}

NODE_NAME="${NODE_NAME-""}"
if [ -z "${NODE_NAME}" ]; then
    echo "Must provide a node name to run collection on"
    exit 1
fi
POD_NAME="${POD_NAME-""}"
if [ -z "${POD_NAME}" ]; then
    echo "Must provide the name of the must-gather pod"
    exit 1
fi
process="${1:-}"
if [ "${process}" == "" ]; then
    echo "Please provided a process ID or process name."
    exit 1
fi

mkdir -p "${LOG_PATH}"
cd "${LOG_PATH}"
image=$(get_collection_image "${POD_NAME}")
collect_data "${NODE_NAME}" collect-pmd-info "${image}" "${process}"
