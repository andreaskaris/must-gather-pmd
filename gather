#!/bin/bash

set -eux

VERBOSE=true
EXTRACT_TIMEOUT=600s
RESOURCE_DIR="${RESOURCE_DIR:-"/resources"}"
BASE_COLLECTION_PATH="must-gather"
DATA_DIR="${BASE_COLLECTION_PATH}/collect-pmd-info"

# verbose can be enabled or disabled on demand
verbose () {
  [[ "${VERBOSE}" ]] && echo "$@" >&2
}

wait_for() {
  local daemonset_name="${1}"
  kubectl rollout status ds "${daemonset_name}" --timeout="${EXTRACT_TIMEOUT}"
}

get_collection_image() {
    local pod_name
    pod_name="${1:-}"

    verbose "Getting collection image from pod '${pod_name}'"

    kubectl get pods "${pod_name}" -o jsonpath='{.spec.containers[0].image}'
}

# save_collector_logs gets the logs of all containers of all data collectors and stores them in the must-gather.
save_collector_logs() {
    local daemonset_label="${1}"

    pushd "${DATA_DIR}"
    for pod in $(kubectl get pods -o name -l "${daemonset_label}"); do
        verbose "Saving logs from pod '${pod}'"
        kubectl logs -c data-collector "${pod}" > "${pod/pod\//}.log"
    done
    popd
}

# save_data copies all collected data from the collectors to the must-gather pod.
save_data() {
    local daemonset_label="${1}"
    local container_name="${2}"

    pushd "${DATA_DIR}"
    for pod in $(kubectl get pods -o name -l "${daemonset_label}"); do
        verbose "Copying data from pod '${pod}'"
        mkdir -p "${pod}"
        kubectl cp -c "${container_name}" "${pod/pod\//}:/data-store" "${pod}"
    done
    popd
}

# collect_data modifies the kustomization data, spawns the DaemonSet and waits for the DaemonSet's init containers
# (= data collectores) to finish. It saves both the logs and data, then it deletes the DaemonSet.
# The only thing that distinguishes a successful run from a failed run is the success / WARNING message. The reason
# for this is that even if the scripts time out, etc., we want to capture all the data that we gathered up to this
# point.
collect_data() {
    local daemonset_name="${1}"
    local daemonset_label="${2}"
    local image="${3}"
    local node_name="${4}"
    local process="${5}"

    verbose  "Spawning daemonset: '${daemonset_name}', daemonset_label: '${daemonset_label}'"
    set_daemonset_image "${image}"
    set_daemonset_environment_variables "${process}"
    set_daemonset_node_selector "${node_name}"
    run_daemonset

    if wait_for "${daemonset_name}"; then
        verbose  "Data collection succeeded"
        save_collector_logs "${daemonset_label}"
        save_data "${daemonset_label}" "sleep-infinity"
        delete_daemonset
    else
        verbose  "WARNING: Data timed out or failed"
        save_collector_logs "${daemonset_label}"
        save_data "${daemonset_label}" "network-metrics"
        delete_daemonset
    fi
}

# set_daemonset_image modifies the kustomization.yaml and specifies a new image to use for the collector pods.
set_daemonset_image() {
    local image="${1}"

    verbose "Setting IMAGE='${image}'"

    sed -i "s#^  newName:.*#  newName: ${image}#" "${RESOURCE_DIR}/kustomization.yaml"
}

# set_daemonset_environment_variables sets INTERVAL and DURATION in patch-env.json (which in turn is added to the
# DaemonSet's pods' environment).
set_daemonset_environment_variables() {
    local process="${1}"
    local tmp_file
    tmp_file=$(mktemp)
    jq '(.spec.template.spec.initContainers[] | select(.name == "data-collector") | .env[] | select(.name == "TIMEOUT") | .value) |= "'"${EXTRACT_TIMEOUT}"'"' \
    "${RESOURCE_DIR}/patch-env.json" > "${tmp_file}"
    cp "${tmp_file}" "${RESOURCE_DIR}/patch-env.json"
    jq '(.spec.template.spec.initContainers[] | select(.name == "data-collector") | .env[] | select(.name == "PROCESS") | .value) |= "'"${process}"'"' \
        "${RESOURCE_DIR}/patch-env.json" > "${tmp_file}"
    cp "${tmp_file}" "${RESOURCE_DIR}/patch-env.json"
    verbose "New environment file is: $(cat "${RESOURCE_DIR}"/patch-env.json)"
    rm -f "${tmp_file}"
}

# set_daemonset_node_selector sets .spec.template.spec.nodeName.
set_daemonset_node_selector() {
    local node_name="${1}"

    local tmp_file
    tmp_file=$(mktemp)
    jq ".spec.template.spec.nodeName = \"${node_name}\"" "${RESOURCE_DIR}/patch-selector.json" > "${tmp_file}"
    cp "${tmp_file}" "${RESOURCE_DIR}/patch-selector.json"

    verbose "New node selector is: $(cat "${RESOURCE_DIR}/patch-selector.json")"
    rm -f "${tmp_file}"
}

# run_daemonset applies the DS inside the current namespace.
run_daemonset() {
    pushd "${RESOURCE_DIR}"
    kubectl apply -k .
    popd
}

# delete_daemonset deletes the DS from the current namespace.
delete_daemonset() {
    pushd "${RESOURCE_DIR}"
    kubectl delete -k .
    popd
}

NODE_NAME="${NODE_NAME-""}"
if [ -z "${NODE_NAME}" ]; then
    echo "Must provide a node name to run collection on"
    exit 1
fi
POD_NAME="${POD_NAME-""}"
if [ -z "${POD_NAME}" ]; then
    echo "Must provide the name of the must-gather pod"
    exit 1
fi
process="${1:-}"
if [ "${process}" == "" ]; then
    echo "Please provided a process ID or process name"
    exit 1
fi

mkdir -p "${DATA_DIR}"
image=$(get_collection_image "${POD_NAME}")
daemonset_name=collect-pmd-info
daemonset_label="app=collect-pmd-info"
collect_data "${daemonset_name}" "${daemonset_label}" "${image}" "${NODE_NAME}" "${process}"
